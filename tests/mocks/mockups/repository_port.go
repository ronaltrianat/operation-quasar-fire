// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/ports/repository_port.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ronaltrianat/operation-quasar-fire/src/core/domain"
)

// MockRepositoryPort is a mock of RepositoryPort interface.
type MockRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPortMockRecorder
}

// MockRepositoryPortMockRecorder is the mock recorder for MockRepositoryPort.
type MockRepositoryPortMockRecorder struct {
	mock *MockRepositoryPort
}

// NewMockRepositoryPort creates a new mock instance.
func NewMockRepositoryPort(ctrl *gomock.Controller) *MockRepositoryPort {
	mock := &MockRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPort) EXPECT() *MockRepositoryPortMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepositoryPort) Get(id string) (*domain.Satellite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.Satellite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryPortMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryPort)(nil).Get), id)
}

// Save mocks base method.
func (m *MockRepositoryPort) Save(data *domain.Satellite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryPortMockRecorder) Save(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryPort)(nil).Save), data)
}
